SVN: handles big binary files, better access control, better for big global team (better for big network traffic), easier to learn
------------------------------------------------------------------------------------------------
---first config---------------------------------------------------------------------------------
git config --list --show-origin

git config --global user.name "Etak"
git config --global user.email bm4bwz@gmail.com
git config --global core.editor "code --wait"
git config --global init.defaultBranch main

git config --list
git config user.name
-------------------------------------------------------------------------------------------------
!exit CMD list -> press 'Q' key!
git status <-s>                     //Checking the Status of Your Files, -s : short
git diff <--staged/--cached>        //more detailed as status, it shows the (staged) changes
git log -2 --graph                  //log commit history (last two), <n> <--since>/<--after> <--until>/<--before>

echo 'text to write in' README.md          //create README and put text in it

git init                            //create empty repository, must be in the directory in CMD
git remote add origin https://github.com/adamcece/<repo_name>.git
git push -u origin main

git clone <url> <directory name>    //clones a repository
git clone https://github.com/libgit2/libgit2

git add <filename>                  //start tracking file -> put it into INDEX cash,
                                    //must be re-added after any modification before commit
git add *.c                         //adding all .c extension files
git add -A				//all files/subdirectories new, modified, and deleted files
git add .				//only stages files in the current directory and not any subdirectories
git add -u				//modified and deleted files, but not any new files

git commit                          //commit STAGED/ADDED changes
git commit -m "commit message"              //-m : commit message
git commit -a -m 'commit message'       //-a : skipping staged area/index -> commit all the changes

git rm <filename>                   //Removing Files from tracked files/staged area and directory -> COMMIT
git rm --cached <filename>          //not deleted from directory
git mv file_from file_to            //move/rename file to another -> must be ADDED

---------------------------
git branch -M main
